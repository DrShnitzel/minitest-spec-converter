class ExampleTest < Minitest::Test
  def setup
    do_some_setup
  end

  def setup_some_not_minitest_setup
    do_something
  end

  def test_complex_case
    assert_equal "DTP*573*D8*#{date.strftime("%Y%m%d")}~", batch.get_tpl_denial_date(tpl_denial)
  end

  def test_truthy
    assert is_it_true?
  end

  def test_truthy_2
    assert(is_it_true?)
  end

  def test_some_value
    assert_equal some_value, expected_value
  end

  def test_some_value_2
    assert_equal(some_value, expected_value)
  end

  def test_not_equal
    assert_not_equal some_value, unexpected_value
  end

  def test_not_equal_2
    assert_not_equal(some_value, unexpected_value)
  end

  def test_nil
    assert_nil some_value
  end

  def test_nil_2
    assert_nil(some_value)
  end

  def test_not_nil
    refute_nil some_value
  end

  def test_not_nil_2
    refute_nil(some_value)
  end

  def test_empty
    assert_empty some_value
  end

  def test_empty_2
    assert_empty(some_value)
  end

  def test_not_empty
    refute_empty some_value
  end

  def test_not_empty_2
    refute_empty(some_value)
  end

  def test_includes
    assert_includes collection, item
  end

  def test_includes_2
    assert_includes(collection, item)
  end

  def test_not_includes
    refute_includes collection, item
  end

  def test_not_includes_2
    refute_includes(collection, item)
  end

  def test_match
    assert_match pattern, string
  end

  def test_match_2
    assert_match(pattern, string)
  end

  def test_not_match
    refute_match pattern, string
  end

  def test_not_match_2
    refute_match(pattern, string)
  end

  def test_raises
    assert_raises SomeException do
      method_that_raises
      line2
      line3
    end
  end

  def test_raises_2
    assert_raises(SomeException) { method_that_raises }
  end

  def test_instance_of
    assert_instance_of SomeClass, object
  end

  def test_instance_of_2
    assert_instance_of(SomeClass, object)
  end

  def test_not_instance_of
    refute_instance_of SomeClass, object
  end

  def test_not_instance_of_2
    refute_instance_of(SomeClass, object)
  end

  def test_kind_of
    assert_kind_of SomeClass, object
  end

  def test_kind_of_2
    assert_kind_of(SomeClass, object)
  end

  def test_not_kind_of
    refute_kind_of SomeClass, object
  end

  def test_not_kind_of_2
    refute_kind_of(SomeClass, object)
  end

  def test_predicate
    assert_predicate object, :predicate_method?
  end

  def test_predicate_2
    assert_predicate(object, :predicate_method?)
  end

  def test_not_predicate
    refute_predicate object, :predicate_method?
  end

  def test_not_predicate_2
    refute_predicate(object, :predicate_method?)
  end

  def test_operator
    assert_operator object, :>, other_object
  end

  def test_operator_2
    assert_operator(object, :>, other_object)
  end

  def test_not_operator
    refute_operator object, :>, other_object
  end

  def test_not_operator_2
    refute_operator(object, :>, other_object)
  end
end
